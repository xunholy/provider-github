name: Compare Terraform and Crossplane Resources

on:
  schedule:
    - cron: "0 0 * * *" # Run daily at midnight UTC
  workflow_dispatch: # Allow manual triggering

jobs:
  compare-resources:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Initialize Terraform
        run: terraform init

      - name: Get Terraform Provider Resources
        run: |
          terraform providers schema -json | jq -r '.provider_schemas."registry.terraform.io/integrations/github".resource_schemas | keys[]' | sort > terraform_resources.txt

      - name: Extract Crossplane Supported Resources
        id: crossplane-resourcels
        run: |
          grep -oP '\"github_[^\"]+\"' config/external_name.go | sed 's/"//g' | sort > crossplane_resources.txt

      - name: Compare Resources and Report Missing
        id: compare
        run: |
          comm -23 terraform_resources.txt crossplane_resources.txt > missing_resources.txt
          if [ -s missing_resources.txt ]; then
            echo "MISSING_RESOURCES=true" >> $GITHUB_ENV
            echo "Missing resources found:"
            cat missing_resources.txt
          else
            echo "No missing resources found."
          fi

      - name: Create or Update GitHub Issue for Missing Resources
        if: env.MISSING_RESOURCES == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            const missingResources = fs.readFileSync('missing_resources.txt', 'utf8').trim();

            const issueTitle = `Unsupported Terraform Resources in Crossplane`;
            const issueBody = `
            The following Terraform resources are available but not yet supported by the Crossplane provider:

            \`\`\`
            ${missingResources}
            \`\`\`

            Please prioritize adding support for these resources.

            Last updated: ${new Date().toISOString()}
            `;

            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['unsupported-resources']
            });

            const existingIssue = issues.find(issue => issue.title === issueTitle);

            if (existingIssue) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: issueBody
              });
              console.log(`Updated existing issue #${existingIssue.number}`);
            } else {
              const { data: newIssue } = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['unsupported-resources']
              });
              console.log(`Created new issue #${newIssue.number}`);
            }
