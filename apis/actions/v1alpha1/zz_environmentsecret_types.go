// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EnvironmentSecretInitParameters struct {

	// Encrypted value of the secret using the GitHub public key in Base64 format.
	// Encrypted value of the secret using the GitHub public key in Base64 format.
	EncryptedValueSecretRef *v1.SecretKeySelector `json:"encryptedValueSecretRef,omitempty" tf:"-"`

	// Name of the environment.
	// Name of the environment.
	// +crossplane:generate:reference:type=github.com/xunholy/provider-github/apis/repo/v1alpha1.RepositoryEnvironment
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// Reference to a RepositoryEnvironment in repo to populate environment.
	// +kubebuilder:validation:Optional
	EnvironmentRef *v1.Reference `json:"environmentRef,omitempty" tf:"-"`

	// Selector for a RepositoryEnvironment in repo to populate environment.
	// +kubebuilder:validation:Optional
	EnvironmentSelector *v1.Selector `json:"environmentSelector,omitempty" tf:"-"`

	// Plaintext value of the secret to be encrypted.
	// Plaintext value of the secret to be encrypted.
	PlaintextValueSecretRef *v1.SecretKeySelector `json:"plaintextValueSecretRef,omitempty" tf:"-"`

	// Name of the repository.
	// Name of the repository.
	// +crossplane:generate:reference:type=github.com/xunholy/provider-github/apis/repo/v1alpha1.Repository
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// Reference to a Repository in repo to populate repository.
	// +kubebuilder:validation:Optional
	RepositoryRef *v1.Reference `json:"repositoryRef,omitempty" tf:"-"`

	// Selector for a Repository in repo to populate repository.
	// +kubebuilder:validation:Optional
	RepositorySelector *v1.Selector `json:"repositorySelector,omitempty" tf:"-"`

	// Name of the secret.
	// Name of the secret.
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`
}

type EnvironmentSecretObservation struct {

	// Date of actions_environment_secret creation.
	// Date of 'actions_environment_secret' creation.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Name of the environment.
	// Name of the environment.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of the repository.
	// Name of the repository.
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// Name of the secret.
	// Name of the secret.
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`

	// Date of actions_environment_secret update.
	// Date of 'actions_environment_secret' update.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type EnvironmentSecretParameters struct {

	// Encrypted value of the secret using the GitHub public key in Base64 format.
	// Encrypted value of the secret using the GitHub public key in Base64 format.
	// +kubebuilder:validation:Optional
	EncryptedValueSecretRef *v1.SecretKeySelector `json:"encryptedValueSecretRef,omitempty" tf:"-"`

	// Name of the environment.
	// Name of the environment.
	// +crossplane:generate:reference:type=github.com/xunholy/provider-github/apis/repo/v1alpha1.RepositoryEnvironment
	// +kubebuilder:validation:Optional
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// Reference to a RepositoryEnvironment in repo to populate environment.
	// +kubebuilder:validation:Optional
	EnvironmentRef *v1.Reference `json:"environmentRef,omitempty" tf:"-"`

	// Selector for a RepositoryEnvironment in repo to populate environment.
	// +kubebuilder:validation:Optional
	EnvironmentSelector *v1.Selector `json:"environmentSelector,omitempty" tf:"-"`

	// Plaintext value of the secret to be encrypted.
	// Plaintext value of the secret to be encrypted.
	// +kubebuilder:validation:Optional
	PlaintextValueSecretRef *v1.SecretKeySelector `json:"plaintextValueSecretRef,omitempty" tf:"-"`

	// Name of the repository.
	// Name of the repository.
	// +crossplane:generate:reference:type=github.com/xunholy/provider-github/apis/repo/v1alpha1.Repository
	// +kubebuilder:validation:Optional
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// Reference to a Repository in repo to populate repository.
	// +kubebuilder:validation:Optional
	RepositoryRef *v1.Reference `json:"repositoryRef,omitempty" tf:"-"`

	// Selector for a Repository in repo to populate repository.
	// +kubebuilder:validation:Optional
	RepositorySelector *v1.Selector `json:"repositorySelector,omitempty" tf:"-"`

	// Name of the secret.
	// Name of the secret.
	// +kubebuilder:validation:Optional
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`
}

// EnvironmentSecretSpec defines the desired state of EnvironmentSecret
type EnvironmentSecretSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EnvironmentSecretParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EnvironmentSecretInitParameters `json:"initProvider,omitempty"`
}

// EnvironmentSecretStatus defines the observed state of EnvironmentSecret.
type EnvironmentSecretStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EnvironmentSecretObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EnvironmentSecret is the Schema for the EnvironmentSecrets API. Creates and manages an Action Secret within a GitHub repository environment
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,github}
type EnvironmentSecret struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.secretName) || (has(self.initProvider) && has(self.initProvider.secretName))",message="spec.forProvider.secretName is a required parameter"
	Spec   EnvironmentSecretSpec   `json:"spec"`
	Status EnvironmentSecretStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EnvironmentSecretList contains a list of EnvironmentSecrets
type EnvironmentSecretList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EnvironmentSecret `json:"items"`
}

// Repository type metadata.
var (
	EnvironmentSecret_Kind             = "EnvironmentSecret"
	EnvironmentSecret_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EnvironmentSecret_Kind}.String()
	EnvironmentSecret_KindAPIVersion   = EnvironmentSecret_Kind + "." + CRDGroupVersion.String()
	EnvironmentSecret_GroupVersionKind = CRDGroupVersion.WithKind(EnvironmentSecret_Kind)
)

func init() {
	SchemeBuilder.Register(&EnvironmentSecret{}, &EnvironmentSecretList{})
}
